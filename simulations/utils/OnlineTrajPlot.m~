
classdef OnlineTrajPlot < handle
    
    methods (Access = public)
        
        function this = OnlineTrajPlot(pos_lim, vel_lim, accel_lim, slack_lim, Time, Pd_data, dPd_data, ddPd_data)
            
            pos_hlim = pos_lim + slack_lim(1)*[-1, 1];
            vel_hlim = vel_lim + slack_lim(2)*[-1, 1];
            accel_hlim = accel_lim + slack_lim(3)*[-1, 1];
            
            ref_traj_properties = {'LineWidth',2, 'LineStyle','--', 'Color', 'blue'};
            opt_traj_properties = {'LineWidth',2, 'LineStyle','-', 'Color', 'magenta'};
            solf_lim_properties = {'LineWidth',2, 'LineStyle','--', 'Color',[1 0.5 0.5]};
            hard_lim_properties = {'LineWidth',2, 'LineStyle','--', 'Color',[0.5 0.5 0.5]};
            
            label_font = 15;
            axis_font = 14;
            
            ind = [1 2 3]; % choose DoFs to plot, e.g. [1 2 3] for [x y z]
            
            this.ax_ = cell(3, length(ind));
            this.lh_ = cell(3, length(ind));
            
            for k=1:length(ind)

                i = ind(k);

                fig = figure;
                fig.Position(3:4) = [842 1110];
                
                this.fig_{k} = fig;

                % ----- position trajectory ------
                ax = subplot(3,1,1, 'Parent',fig);
                this.ax_{k, 1} = ax;
                hold(ax, 'on');
                plot(Time, Pd_data(i,:), ref_traj_properties{:}, 'Parent',ax);
                this.lh_{k, 1} = plot(nan, nan, opt_traj_properties{:}, 'Parent',ax);
                axis(ax, 'tight');
                % plot start and final positions
                plot(0, y0(i), 'LineWidth', 4, 'LineStyle','none', 'Color','green','Marker','o', 'MarkerSize',10, 'Parent',ax);
                plot(tau, yg(i), 'LineWidth', 4, 'LineStyle','none', 'Color','red','Marker','x', 'MarkerSize',10, 'Parent',ax);
                % plot bounds
                plot(ax.XLim, [pos_lim(i,1) pos_lim(i,1)], solf_lim_properties{:}, 'Parent',ax);
                plot(ax.XLim, [pos_lim(i,2) pos_lim(i,2)], solf_lim_properties{:}, 'Parent',ax);
                % plot hard limits
                plot(ax.XLim, [pos_hlim(i,1) pos_hlim(i,1)], hard_lim_properties{:}, 'Parent',ax);
                plot(ax.XLim, [pos_hlim(i,2) pos_hlim(i,2)], hard_lim_properties{:}, 'Parent',ax);
                % labels, title ...
                ylabel('pos [$m$]', 'interpreter','latex', 'fontsize',label_font, 'Parent',ax);
                % legend(legend_, 'interpreter','latex', 'fontsize',17, 'Position',[0.2330 0.9345 0.5520 0.0294], 'Orientation', 'horizontal');
                ax.FontSize = axis_font;

                % ----- velocity trajectory ------
                ax = subplot(3,1,2, 'Parent',fig);
                this.ax_{k, 2} = ax;
                hold(ax, 'on');
                plot(Time, dPd_data(i,:), ref_traj_properties{:}, 'Parent',ax);
                this.lh_{k, 1} = plot(nan, nan, opt_traj_properties{:}, 'Parent',ax);
                axis(ax, 'tight');
                % plot bounds
                plot(ax.XLim, [vel_lim(i,1) vel_lim(i,1)], solf_lim_properties{:}, 'Parent',ax);
                plot(ax.XLim, [vel_lim(i,2) vel_lim(i,2)], solf_lim_properties{:}, 'Parent',ax);
                % plot hard limits
                plot(ax.XLim, [vel_hlim(i,1) vel_hlim(i,1)], hard_lim_properties{:}, 'Parent',ax);
                plot(ax.XLim, [vel_hlim(i,2) vel_hlim(i,2)], hard_lim_properties{:}, 'Parent',ax);
                ylabel('vel [$m/s$]', 'interpreter','latex', 'fontsize',label_font, 'Parent',ax);
                ax.FontSize = axis_font;

                % ----- acceleration trajectory ------
                ax = subplot(3,1,3);
                this.ax_{k, 3} = ax;
                hold(ax, 'on');
                plot(Time, ddPd_data(i,:), ref_traj_properties{:}, 'Parent',ax);
                this.lh_{k, 1} = plot(nan, nan, opt_traj_properties{:}, 'Parent',ax);
                axis(ax, 'tight');
                % plot bounds
                plot(ax.XLim, [accel_lim(i,1) accel_lim(i,1)], solf_lim_properties{:}, 'Parent',ax);
                plot(ax.XLim, [accel_lim(i,2) accel_lim(i,2)], solf_lim_properties{:}, 'Parent',ax);
                % plot hard limits
                plot(ax.XLim, [accel_hlim(i,1) accel_hlim(i,1)], hard_lim_properties{:}, 'Parent',ax);
                plot(ax.XLim, [accel_hlim(i,2) accel_hlim(i,2)], hard_lim_properties{:}, 'Parent',ax);
                ylabel('accel [$m/s^2$]', 'interpreter','latex', 'fontsize',label_font, 'Parent',ax);
                xlabel('time [$s$]', 'interpreter','latex', 'fontsize',label_font, 'Parent',ax);
                ax.FontSize = axis_font;

            end
            
        end
        
        function update_plot(this, t, y, y_dot, y_ddot)

            for i=1:length(y)
                h = this.lh_{i, 1};
                h.XData = [h.XData t];
                
            end
            this.p_h.XData = [this.p_h.XData log_.y_current(1)];
            this.p_h.YData = [this.p_h.YData log_.y_current(2)];
            if (this.dim == 3)
                this.p_h.ZData = [this.p_h.ZData log_.y_current(3)];
            end
            
            this.plt_show_count = this.plt_show_count + 1;
            if (this.plt_show_count < this.plot_every), return; end

            delete(this.plt_handles);
            
            n_dof = length(log_.y_current);
            
            

            drawnow();
            this.plt_show_count = 0;
            pause(0.001);

        end
        
    end
    

    properties (Access = protected)

        plot_every = 10
        fig_
        ax_
        lh_
        plt_show_count = 0
        
    end
    
    
end